name: Auto Version on PR merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  update_version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Show HEAD
      run: git show HEAD:sub/version.cs

    - name: Parse and increase version
      run: |
        ### Note
        # ver_1: version of manifest.xml
        # ver_2: version of CommonDefine.cs

        ### Parse
        # get last version from the latest commit
        ver_curr_1=$(git show HEAD:manifest.xml | grep -oP '(?<=<version>).*?(?=</version>)')
        ver_curr_2=$(git show HEAD:sub/version.cs | grep -oP 'public const string version = "\K[^"]+')
        echo "ver_curr_1: $ver_curr_1"
        echo "ver_curr_2: $ver_curr_2"

        # check if there is no problem with the version
        if [[ "$ver_curr_1" != "$ver_curr_2" ]]; then
          echo "The version of manifest.xml and the version of CommonDefine.cs are not the same"
          exit 1
        fi
        ver_curr=$ver_curr_1

        # split ver_curr
        IFS='.' read -r -a ver_curr_parts <<< "$ver_curr"
        echo "ver_curr_parts[0]: ${ver_curr_parts[0]}"
        echo "ver_curr_parts[1]: ${ver_curr_parts[1]}"
        echo "ver_curr_parts[2]: ${ver_curr_parts[2]}"

        # get ver_product
        ver_product=${ver_curr_parts[0]}
        echo "ver_product: $ver_product"

        # get current date
        year=$(TZ="Asia/Seoul" date +"%y")
        month=$(TZ="Asia/Seoul" date +"%m")
        day=$(TZ="Asia/Seoul" date +"%d")
        echo "year: $year"
        echo "month: $month"
        echo "day: $day"

        # get are_dates_equal
        curr_y=${ver_curr_parts[1]}
        curr_md=${ver_curr_parts[2]:0:4}
        next_y=$year
        next_md=$month$day
        are_dates_equal=$((curr_y == next_y && curr_md == next_md))

        ### Generate next version
        # get version_curr_seq
        ver_curr_seq=0
        minor_ver_curr_length=${#ver_curr_parts[2]}
        if ((minor_ver_curr_length == 5)); then
          ver_curr_seq=${ver_curr_parts[2]: -1}
        elif ((minor_ver_curr_length == 6)); then
          ver_curr_seq=${ver_curr_parts[2]: -2:2}
        fi
        echo "ver_curr_seq: $ver_curr_seq"

        # get version_next_seq
        ver_next_seq=0
        if ((are_dates_equal)); then
          ver_next_seq=$((ver_curr_seq + 1))
        else
          ver_next_seq=1
        fi
        echo "ver_next_seq: $ver_next_seq"

        # get version_next
        ver_next="${ver_product}.${year}.${month}${day}${ver_next_seq}"
        echo "ver_next: $ver_next"
        echo "ver_next=${ver_next}" >> $GITHUB_ENV

        ### Update version in version.cs
        # check
        # TODO: Write script for checking

        # execute
        sed -i "s/\(public const string version = \"\)[0-9.]*\(\"\)/\1$ver_next\2/" sub/version.cs
        sed -i "s@\(<version>\)[^<]*\(<\/version>\)@\1$ver_next\2@" manifest.xml

    - name: Commit and push with next version
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add sub/version.cs
        git add manifest.xml
        git commit -m "Update version to $ver_next"
        git push origin main
